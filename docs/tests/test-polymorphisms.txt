
"""setup"""
from whatever import * # == from toolz.curried import *; from whatever import _X, Chain, Forever
from toolz.curried import *
from typing import Callable
import toolz
import pytest 
def will_raise(chain, types=TypeError):
    with pytest.raises(types) as t:
        chain.value()

@curry
def compare(composed, composition, value):
    assert composed.value(value) == composition(value)

"""test_simple"""
f = Chain(10).range.list
compare(f, compose(list, range), 20)
f

f = Chain(10).range(5).list
compare(f, compose(list, partial(range, 5)), 20)
f

f = Chain(10)[range](5)[list]
compare(f, compose(list, partial(range, 5)))
f

f.compose.funcs

g = lambda x: x**2
f = _X(10).range(4).map(g).list
compare(f, compose(list, map(g), partial(range, 4)))(20)
f

g = lambda x: x**2
f = _X(10).range(4) * g | list
compare(f, compose(list, map(g), partial(range, 4)))(20)
f

g = lambda x: x**2
f = _X(10).range(4) * g | list
compare(f, compose(list, map(g), partial(range, 4)))(20)
f

g = lambda x: x**2
f = _X(10).range(3) * g + (lambda x: x< 20) | list
compare(f, compose(list, filter(lambda x: x< 20), map(g), partial(range, 3)))(20)
f

f = _X(10).range[[sum, list, len]]
compare(f, compose(list, juxt(sum, list, len), range))(20)
f

f = _X(10).range[(sum, list, len)]
# compare(f, compose(juxt(sum, list, len), range))(20)
f._tokens

f = _X(10).range | (sum, list, len)
compare(f, compose(juxt(sum, list, len), range))(20)
f

f = _X(10).range | [sum, list, len]
compare(f, compose(list, juxt(sum, list, len), range))(20)
f

_X(10).range[[sum, list, len]] * type * do(print) | list

_X(10).range[{'a': sum, 'b': list, 'c': len}]

_X(10).range | {'a': sum, 'b': list, 'c': len}

_X(10).range[{sum, list, len}]

d = _X(10).range.list | {sum, list, len} | this()[sum].compose
d.value()

d = (_X(10).range * range + bool )* {sum, len} | list | list 
d

will_raise(Chain(10).range.map(range).filter(bool).map({'s': sum, 'l': len}).list)

d = (_X(10).range * range + bool ) * {'s': sum, 'l': len} | list 
assert d.f() == _X(10).range.map(range).filter(bool).map({'s': sum, 'l': len}).list.value()

d = (_X(10).range * range + bool ) * [sum, len] | list 
assert d.f() == Chain(10).range.map(range).filter(bool).map(juxt(sum, len)).map(list).list.value()
d

f = Chain(10).range.list.value()
assert len(f)==10
assert isinstance(f, list)
f

f = _X(10).range.list.f()
assert len(f)==10
assert isinstance(f, list)
f

f = _X(10).range.list.value()
assert len(f)==10
assert isinstance(f, list)
f

_X(10).range.list > identity
assert len(f)==10
assert isinstance(f, list)
f

f = _X(10) | range | list > identity
assert len(f)==10
assert isinstance(f, list)
f

f = Chain(10).range.list.value
assert isinstance(f, Callable)
f(4)

f = _X(10).range.list.f
assert isinstance(f, Callable)
f(4)

f = _X(10).range.list.value
assert isinstance(f, Callable)
f(4)

f = _X(10).range.list > compose
assert isinstance(f, toolz.functoolz.Compose)
f(4)

f = _X(10) | range | list > compose
assert isinstance(f, toolz.functoolz.Compose)
f(4)

class Foo:
    bar = 10
    baz = 'jump'
this(Foo).bar.value()

this({'a': Foo, 'b': 'car'})['a'].bar.value()

this({'a': Foo, 'b': 'car'})['b'].chain | str.upper | interpose('g') | ''.join
